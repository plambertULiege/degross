res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, gradient=TRUE)
library(degross)
sim = simDegrossData(n=3500, plotting=TRUE,choice=2) ## Generate grouped data
obj.data = Degross(Big.bins=sim$Big.bins, freq.j=sim$freq.j, m.j=sim$m.j)
print(obj.data)
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
phi.hat = obj.fit$phi ; tau.hat = obj.fit$tau
## Evaluate the log-posterior at convergence
res = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data)
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data,gradient=TRUE)
res2$Score.mj
res2$Score.nj
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, n.i=obj.fit$n.i, degross.data=obj.data,gradient=TRUE)
res2$Score.nj
res2$Score.ni
?degross_lpost
res = with(obj.fit, degross_lpost(phi, tau, n.i, obj.data, diag.only=diag.only))
res2$Score.ni
obj.fit$Score
obj.fit$Score.ni
res2$Score.ni
obj.fit$Score.mj
res2$Score.mj
res2$Score.ni
obj.fit$Score.ni
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
obj.fit$Score
obj.fit$Score.ni
res = with(obj.fit, degross_lpost(phi, tau, n.i, obj.data)
)
res$Score.ni
res = degross_lpost(phi=obj.fit$phi, tau=obj.fit$tau, n.i=obj.fit$n.i, obj.data)
res$n.i
res$Score.ni
names(obj.fit)
obj.fit$Score.ni
obj.fit$Score
library(degross)
sim = simDegrossData(n=3500, plotting=TRUE,choice=2) ## Generate grouped data
obj.data = Degross(Big.bins=sim$Big.bins, freq.j=sim$freq.j, m.j=sim$m.j)
print(obj.data)
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
obj.fit$Score
obj.fit$Score.ni
obj.fit$Score.mj
library(degross)
sim = simDegrossData(n=3500, plotting=TRUE,choice=2) ## Generate grouped data
obj.data = Degross(Big.bins=sim$Big.bins, freq.j=sim$freq.j, m.j=sim$m.j)
print(obj.data)
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
obj.fit$Score.ni
obj.fit$Score
obj.fit$Score.mj
with(obj.fit, range(Fisher.ni-Fisher))
with(obj.fit, range(Fisher.mj-Fisher))
with(obj.fit, range(diang(Fisher.mj-Fisher)))
with(obj.fit, range(diag(Fisher.mj-Fisher)))
?degross_lpostBasic
res = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data)
res$Score
res = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, gradient=TRUE)
res$Score
res$Score.mj
library(degross)
sim = simDegrossData(n=3500, plotting=TRUE,choice=2) ## Generate grouped data
obj.data = Degross(Big.bins=sim$Big.bins, freq.j=sim$freq.j, m.j=sim$m.j)
print(obj.data)
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
phi.hat = obj.fit$phi ; tau.hat = obj.fit$tau
## Evaluate the log-posterior at convergence
res = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data)
res$Score
res$Score.mj
res = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, gradient=TRUE)
res$Score.mj
res$Score.ni
obj.fit$Score.mj
library(degross)
sim = simDegrossData(n=3500, plotting=TRUE,choice=2) ## Generate grouped data
obj.data = Degross(Big.bins=sim$Big.bins, freq.j=sim$freq.j, m.j=sim$m.j)
print(obj.data)
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
phi.hat = obj.fit$phi ; tau.hat = obj.fit$tau
## Evaluate the log-posterior at convergence
res = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data)
res = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, gradient=TRUE)
obj.fit$Score.mj
res$Score.mj
res$Score.ni
?degross_lpost
res = with(obj.fit, degross_lpost(phi, tau, n.i, obj.data, diag.only=diag.only))
res$Score.ni
res$Score.mj
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, gradient=TRUE)
names(res2)
res$lpost
res2$lpost
res$lpost.mj
res2$lpost.mj
res2$Score.mj
res$Score.mj
obj.fit$diag.only
res2$freq.j
res2$n.i
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i, gradient=TRUE)
obj.fit$n.i
res2$Score.mj
res$Score.mj
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i, gradient=TRUE)
res = degross_lpost(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i, gradient=TRUE)
res = degross_lpost(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i)
res$Score.mj
res2$Score.mj
library(degross)
sim = simDegrossData(n=3500, plotting=TRUE,choice=2) ## Generate grouped data
obj.data = Degross(Big.bins=sim$Big.bins, freq.j=sim$freq.j, m.j=sim$m.j)
print(obj.data)
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
## Evaluate the log-posterior at convergence
res = with(obj.fit, degross_lpost(phi, tau, n.i, obj.data, diag.only=diag.only))
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i, gradient=TRUE)
res2$Score.mj
res$Score.mj
res$Score.ni
res2$Score.mj
obj.fit$Score.ni
obj.fit$Score.mj
res = with(obj.fit, degross_lpost(phi, tau, n.i, obj.data, diag.only=diag.only))
resScore.mj
res$Score.mj
res$Score.ni
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i, gradient=TRUE)
res$Score.ni
res2$Score.ni
res2$Score.mj
res$Score.mj
res$Score.mj-obj.fit$Score.mj
res2$Score.mj-obj.fit$Score.mj
res$phi-res2$phi
?degross_lpostBasic
phi.hat = obj.fit$phi ; tau.hat = obj.fit$tau
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i, gradient=TRUE)
res$phi-res2$phi
res2$Score.mj
res$Score.mj
res$n.i-res2$n.i
range(res$n.i-res2$n.i)
range(res$Score.ni-res2$Score.ni)
range(res$llik.ni-res2$llik.ni)
range(res$llik.mj-res2$llik.mj)
range(res$moments.penalty-res2$moments.penalty)
library(degross)
sim = simDegrossData(n=3500, plotting=TRUE,choice=2) ## Generate grouped data
obj.data = Degross(Big.bins=sim$Big.bins, freq.j=sim$freq.j, m.j=sim$m.j)
print(obj.data)
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
phi.hat = obj.fit$phi ; tau.hat = obj.fit$tau
## Evaluate the log-posterior at convergence
res = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data)
range(res$Score.lprior-res2$Score.lprior)
range(res$Score.lprior)
range(res2$Score.lprior)
library(degross)
sim = simDegrossData(n=3500, plotting=TRUE,choice=2) ## Generate grouped data
obj.data = Degross(Big.bins=sim$Big.bins, freq.j=sim$freq.j, m.j=sim$m.j)
print(obj.data)
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
phi.hat = obj.fit$phi ; tau.hat = obj.fit$tau
## Evaluate the log-posterior at convergence
res = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data)
print(res)
res$Score.lprior
names(res)
res = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data)
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i, gradient=TRUE)
res$Score.lprior
res2$Score.lprior
?degross_lpost
res2=res
res = with(obj.fit, degross_lpost(phi, tau, n.i, obj.data, diag.only=diag.only))
res2$Score.lprior
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i, gradient=TRUE)
names(res)
res$Score.lprior
res2$Score.lprior
res$Score.ni
res$Score.mj
range(res$Score.mj)
range(res$Score.ni)
range(obj.fit$Score.ni)
range(obj.fit$Score.mj)
range(res2$Score.mj)
range(res2$Score.ni)
library(degross)
sim = simDegrossData(n=3500, plotting=TRUE,choice=2) ## Generate grouped data
obj.data = Degross(Big.bins=sim$Big.bins, freq.j=sim$freq.j, m.j=sim$m.j)
print(obj.data)
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
obj.fit$Score.mj
obj.fit$Score.ni
obj.fit$Score
degross_EM()
degross_EM
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
obj.fit$Score
range(obj.fit$Score)
library(degross)
sim = simDegrossData(n=3500, plotting=TRUE,choice=2) ## Generate grouped data
obj.data = Degross(Big.bins=sim$Big.bins, freq.j=sim$freq.j, m.j=sim$m.j)
print(obj.data)
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
range(obj.fit$Score)
range(obj.fit$m.j)
range(obj.fit$Score.mj)
range(obj.fit$Score.ni)
res = with(obj.fit, degross_lpost(phi, tau, n.i, obj.data, diag.only=diag.only))
res$Score.ni
range(res$Score.ni)
range(res$Score.mj)
range(res$Score)
?degross_lpostBasic
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i, gradient=TRUE)
range(res2$Score)
range(res2$Score.ni)
range(res2$Score.mj)
phi.hat = obj.fit$phi ; tau.hat = obj.fit$tau
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i, gradient=TRUE)
range(res2$Score.mj)
range(res2$Score.ni)
plot(obj.fit)
library(degross)
example("degross_EM")
example("degross_lpostBasic)
""
)
\eqn{log p(\phi|\tau)
example("degross_lpostBasic")
names(res)
library(degross)
example("degross_lpostBasic")
res$Score.lprior
res$Score
res$Score.ni
res$Score.mj
res2=res
example("degross_lpost")
res$Score.mj
res2$Score.mj
phi.hat = obj.fit$phi ; tau.hat = obj.fit$tau
res2 = degross_lpostBasic(phi=phi.hat, tau=tau.hat, degross.data=obj.data, n.i=obj.fit$n.i, gradient=TRUE)
res2$Score.mj
res2$Score.ni
library(degross)
library(degross)
library(degross)
library(degross)
w1 = .10 ; w2 = 1-w1  # 10 pourcents sur la 1re composante du mélange, 90 pourcents sur la 2ème
mu1 = 1 ; mu2 = 3.5   # moyenne de chacune des Normales
sig1 = 1/3 ; sig2 = 0.5   # écart-type de chaque Normale
## Moyenne théorique du mélange
mean.true = w1*mu1 + w2*mu2 ##  --> 3.25
## Variance théorique du mélange
var.true = w1*(sig1**2 + mu1**2 - mean.true**2) + w2*(sig2**2 + mu2**2 - mean.true**2) ## --> 0.7986111
n = 5000 ## Sample size
S = 1500 ## Number of simulated datasets
ybar = numeric(S) ## Vector to store the observed means
set.seed(1234)
for (s in 1:S){ ## Loop over simulated datasets
n1 = round(w1*n) ; n2 = n - n1 ## Number of data per group
y = c(rnorm(n1,mu1,sig1), rnorm(n2,mu2,sig2))  ## Simulated data
ybar[s] = mean(y) ## Mean of the simulated data
}
sd(ybar) ## Observed Standard error of the mean estimator (SEM) --> get 0.006851315
sqrt(var.true / n) ## Theoretical SEM -->  sqrt(0.7986111 / 5000)  =  0.01263813 !!!
library(degross)
library(degross)
?use_github
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
switch(menu(c("List letters", "List LETTERS")) + 1,
cat("Nothing done\n"), letters, LETTERS)
switch(menu(c("List letters", "List LETTERS")) + 1,
cat("Nothing done\n"), letters, LETTERS)
alarm()
adist("kitten", "sitting")
citation(package = "degross")
methods()
methods("print")
plot(obj.fit)
ls()
sim = simDegrossData(n=3500, plotting=TRUE,choice=2) ## Generate grouped data
obj.data = Degross(Big.bins=sim$Big.bins, freq.j=sim$freq.j, m.j=sim$m.j)
print(obj.data)
obj.fit = degross_EM(obj.data) ## Estimate the underlying density
plot(obj.fit)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(degross)
example("degross")
print(ob.data)
print(obj.data)
library(degross)
example("degross")
names(obj.fit)
obj.fit$M.j
obj.data
with(obj.fit,log.evidence)
with(obj.fit,aic)
with(obj.fit,bic)
with(obj.fit,edf)
9
with(obj.fit,rbind(aic=aic))
with(obj.fit,cbind(aic=aic,bic=bic))
with(obj.fit,cbind(edf=edf,aic=aic,bic=bic,log.evidence=log.evidence))
with(obj.fit,c(edf=edf,aic=aic,bic=bic,log.evidence=log.evidence))
with(obj.fit,round(c(edf=edf,aic=aic,bic=bic,log.evidence=log.evidence),1)
)
with(obj.fit,round(c(edf=edf,aic=aic,bic=bic,log.evidence=log.evidence),1))
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
example(degross)
obj.fit
example(qdegross)
names(Q.60)
Q.60
library(degross)
example(qdegross)
QQ = qdegross(c(.25,.5,.75),obj.fit,get.se=TRUE)
QQ
example(pdegross)
example(ddegross)
legend("topright",lty=c("dashed","solid"),lwd=2,legend=c("Estimated","target"),col=c("black","red"),box.lty=0, inset=.04)
legend("topright",lty=c("dashed","solid"),lwd=2,legend=c("Estimated","target CDF"),col=c("black","red"),box.lty=0, inset=.04)
legend("topright",lty=c("dashed","solid"),lwd=2,legend=c("Estimated","target cdf"),col=c("black","red"),box.lty=0, inset=.04)
legend("topright",lty=c("dashed","solid"),lwd=2,legend=c("Estimated cdf","target cdf"),col=c("black","red"),box.lty=0, inset=.04)
roxygen2::roxygenise()
library(degross)
example(pdegross)
roxygen2::roxygenise()
library(degross)
example(pdegross)
library(degross)
example(pdegross)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
legend("topleft", lty=c("solid",dashed"), lwd=2, legend=c("Target cdf","Estimated cdf"), col=c("red","black"), box.lty=0, inset=.04)
legend(topleft, lty=c("solid",dashed"), lwd=2, legend=c("Target cdf","Estimated cdf"), col=c("red","black"), box.lty=0, inset=.04)
legend("topleft", lty=c("solid",dashed"), lwd=2, legend=c("Target cdf","Estimated cdf"), col=c("red","black"), box.lty=0, inset=.04)
?legend
legend("topleft", lty=c("solid",dashed"), lwd=c(2,2), legend=c("Target cdf","Estimated cdf"), col=c("red","black"), box.lty=0, inset=.04)
legend("topleft", lty=c("solid",dashed"), lwd=2, legend=c("Target cdf","Estimated cdf"), col=c("red","black"), box.lty=0, inset=.04)
legend("topleft", lty=c("solid",dashed"), lwd=2, legend="Target cdf", col=c("red","black"), box.lty=0, inset=.04)
legend("topleft", lty=c("solid",dashed"), lwd=2, legend=c("Target cdf","Estimated cdf"), cols=c("red","black"), box.lty=0, inset=.04)
legend("topleft", lty=c("solid",dashed"), lwd=2, legend = c("Target cdf","Estimated cdf"), cols=c("red","black"), box.lty=0, inset=.04)
legend("topleft", lty=c("solid",dashed"), lwd=2, col=c("red","black"), box.lty=0, inset=.04)
legend("topleft", legend = c("Target cdf","Estimated cdf"), lty=c("solid",dashed"), lwd=2, cols=c("red","black"), box.lty=0, inset=.04)
legend("topleft", legend = c("Target cdf","Estimated cdf"))
legend("topleft", legend = c("Target cdf","Estimated cdf"), lty=c("solid",dashed") box.lty=0, inset=.04)
)
""
legend("topleft", legend = c("Target cdf","Estimated cdf"), lty=c("solid",dashed"), box.lty=0, inset=.04)
)
""
legend("topleft", legend = c("Target cdf","Estimated cdf"), lty=c("solid",dashed"), box.lty=0, inset=.04)
)
""
legend("topleft", legend = c("Target cdf","Estimated cdf"), lty = c("solid",dashed"), box.lty=0, inset=.04)
""
legend("topleft", legend = c("Target cdf","Estimated cdf"), lty = c("solid",dashed"), box.lty=0, inset=.04, lwd=2)
""
legend("topleft", lty=c("solid",dashed"), lwd=2, legend=c("Target cdf","Estimated cdf"), col=c("red","black"), box.lty=0, inset=.04)
legend("topleft", lty=c("solid",dashed"), lwd=2, legend=c("Target cdf","Estimated cdf"), col=c("red","black"), box.lty=0, inset=.04)
legend("topleft", lty=c("solid",dashed"), lwd=2, legend=c("Target cdf","Estimated cdf"), col=c("red","black"), box.lty=0, inset=.04)
c("Target cdf","Estimated cdf")
args(lengend)
args(legend)
legend("topleft", legend=c("Target cdf","Estimated cdf"), lty=c("solid",dashed"), lwd=c(2,2), col=c("red","black"), box.lty=0, inset=.04)
legend("topleft", legend=c("Target cdf","Estimated cdf"), lty=c("solid","dashed"), lwd=c(2,2), col=c("red","black"), box.lty=0, inset=.04)
legend("topleft", legend=c("Target cdf","Estimated cdf"), lty=c("solid","dashed"), lwd=c(2,2), col=c("red","black"), box.lty=0, inset=.04)
roxygen2::roxygenise()
library(degross)
example(pdegross)
library(degross)
roxygen2::roxygenise()
library(degross)
library(degross)
example("degross_lpost")
res$Score
res$Score.ni
res$Score.mj
res = with(obj.fit, degross_lpost(phi*0+3, tau, n.i, obj.data, diag.only=diag.only))
res$Score
res$Score.ni
res$Score.mj
library(degross)
res = with(obj.fit, degross_lpost(phi*0+3, tau, n.i, obj.data, diag.only=diag.only))
res$Score
res$Score.mj
res = with(obj.fit, degross_lpostBasic(phi*0+3, tau, n.i, obj.data, diag.only=diag.only))
names(res)
res = with(obj.fit, degross_lpostBasic(phi*0+3, tau, n.i, obj.data, diag.only=diag.only,gradient=TRUE))
names(res)
length(res)
res = with(obj.fit, degross_lpostBasic(phi*0+3, tau, n.i, obj.data, diag.only=diag.only,gradient=FALSE))
length(res)
res = with(obj.fit, degross_lpost(phi*0+3, tau, n.i, obj.data, diag.only=diag.only))
names(res)
library(degross)
library(degross)
roxygen2::roxygenise()
library(degross)
example("degross")
obj.data
obj.fit
library(degross)
example("degross")
obj.fit
example("degross_lpost")
example("degross_lpostBasic")
obj.fit$phi
c(obj.fit$phi)
library(degross)
example("degross_lpostBasic")
obj.fit$phi
names(res)
res
obj.data
names(obj.data)
obj.fit
library(degross)
example("degross")
library(degross)
example("degross")
obj.fit
plot(obj.fit)
plot(obj.fit,lty="solid",col="red")
library(degross)
?print.degross
roxygen2::roxygenise()
library(degross)
?print.degross
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
?survival
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
library(degross)
roxygen2::roxygenise()
library(degross)
example("simDegrossData")
sim = simDegrossData(n=3500, plotting=TRUE, choice=2, J=3)
print(sim$true.density) ## Display density of the data generating mechanism
# Create a degrossData object
obj.data = with(sim, degrossData(Big.bins=Big.bins, freq.j=freq.j, m.j=m.j))
print(obj.data)
sim
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
roxygen2::roxygenise()
library(degross)
library(degross)
roxygen2::roxygenise()
library(degross)
